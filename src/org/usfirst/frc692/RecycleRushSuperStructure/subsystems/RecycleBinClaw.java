// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc692.RecycleRushSuperStructure.subsystems;

import org.usfirst.frc692.RecycleRushSuperStructure.RobotMap;
import org.usfirst.frc692.RecycleRushSuperStructure.commands.*;

import edu.wpi.first.wpilibj.DigitalInput;
import edu.wpi.first.wpilibj.SpeedController;
import edu.wpi.first.wpilibj.command.Subsystem;


/**
 *
 */
public class RecycleBinClaw extends Subsystem {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    DigitalInput recycleBinBottomLimit = RobotMap.recycleBinClawrecycleBinBottomLimit;
    DigitalInput recycleBinDispenseLimit = RobotMap.recycleBinClawrecycleBinDispenseLimit;
    SpeedController recycleBinWinchMotor = RobotMap.recycleBinClawrecycleBinWinchMotor;
    DigitalInput recycleBinTopLimit = RobotMap.recycleBinClawrecycleBinTopLimit;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    
    // Put methods for controlling this subsystem
    // here. Call these from Commands.

    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
	
        // Set the default command for a subsystem here.
        //setDefaultCommand(new MySpecialCommand());
    }
    public void winchUp()
    {
    	recycleBinWinchMotor.set(1.0);
    }
    //winch goes up at 100% power
    //AC 1/17/15
    
    public void winchDown()
    {
    	recycleBinWinchMotor.set(-1.0);
    }
    //winch goes down at 100% power
    //AC 1/17/15
    
    public boolean recycleBinOnBottomLevel()
    {
    	if(recycleBinBottomLimit.get() == true)
    	{
    		return true;
    	}
    	else
    	{
    		return false;
    	}
    }
    //returns true if pressed
    //AC 1/17/15
    
    public boolean recycleBinOnTopLevel()
    {
    	if(recycleBinTopLimit.get() == true)
    	{
    		return true;
    	}
    	else
    	{
    		return false;
    	}
    }
    //returns true if pressed
    //AC 1/17/15
}

