// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc692.RecycleRushSuperStructure.subsystems;

import org.usfirst.frc692.RecycleRushSuperStructure.RobotMap;
import org.usfirst.frc692.RecycleRushSuperStructure.commands.*;

import edu.wpi.first.wpilibj.DigitalInput;
import edu.wpi.first.wpilibj.DoubleSolenoid;
import edu.wpi.first.wpilibj.DoubleSolenoid.Value;
import edu.wpi.first.wpilibj.Encoder;
import edu.wpi.first.wpilibj.SpeedController;
import edu.wpi.first.wpilibj.command.Subsystem;


/**
 *
 */
public class RecycleBinClaw extends Subsystem {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    DigitalInput recycleBinDropLimit = RobotMap.recycleBinClawrecycleBinDropLimit;
    Encoder recycleBinClawEncoder = RobotMap.recycleBinClawrecycleBinClawEncoder;
    DoubleSolenoid recycleBinClawOpenCloser = RobotMap.recycleBinClawrecycleBinClawOpenCloser;
    SpeedController recycleBinWinchMotor = RobotMap.recycleBinClawrecycleBinWinchMotor;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    
    // Put methods for controlling this subsystem
    // here. Call these from Commands.

    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
	
        // Set the default command for a subsystem here.
        //setDefaultCommand(new MySpecialCommand());
    }
    public void winchUp()
    {
    	recycleBinWinchMotor.set(1.0);
    }
    //winch goes up at 100% power
    //AC 1/17/15
    
    public void winchDown()
    {
    	recycleBinWinchMotor.set(-1.0);
    }
    //winch goes down at 100% power
    //AC 1/17/15
    
    public void recycleBinOpen()
    {
    	recycleBinClawOpenCloser.set(Value.kForward);
    }
    //opens recycle bin claw
    //AC 1/17/15
    
    public void recycleBinClose()
    {
    	recycleBinClawOpenCloser.set(Value.kReverse);
    }
    //closes recycle bin claw
    //AC 1/17/15
    
    public boolean recycleBinDrop()
    {
    	if(recycleBinDropLimit.get() == true)
    	{
    		return true;
    	}
    	else
    	{
    		return false;
    	}
    }
    /*
     * indicates when recycle bin can be dropped
     * if pressed returns true
     * AC 1/17/15
     */
    
    public int getEncoderCount()
    {
    	return recycleBinClawEncoder.get();
    }
    
    public double getRawCount()
    {
    	return recycleBinClawEncoder.getRaw();
    }
    
    public double getDistance()
    {
    	return recycleBinClawEncoder.getDistance();
    }
    
    public double getRate()
    {
    	return recycleBinClawEncoder.getRate();
    }
    
    public void encoderReset()
    {
    	recycleBinClawEncoder.reset();
    }
    
    public boolean stopped()
    {
    	if(recycleBinClawEncoder.getStopped())
    	{
    		return true;
    	}
    	else
    	{
    		return false;
    	}
    }
    
    public void winchStop()
    {
    	recycleBinWinchMotor.set(0.0);
    }
}

