// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc692.RecycleRushSuperStructure;

import org.usfirst.frc692.RecycleRushSuperStructure.commands.*;

import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.buttons.JoystickButton;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;


/**
 * This class is the glue that binds the controls on the physical operator
 * interface to the commands and command groups that allow control of the robot.
 */
public class OI {
    //// CREATING BUTTONS
    // One type of button is a joystick button which is any button on a joystick.
    // You create one by telling it which joystick it's on and which button
    // number it is.
    // Joystick stick = new Joystick(port);
    // Button button = new JoystickButton(stick, buttonNumber);
    
    // There are a few additional built in buttons you can use. Additionally,
    // by subclassing Button you can create custom triggers and bind those to
    // commands the same as any other Button.
    
    //// TRIGGERING COMMANDS WITH BUTTONS
    // Once you have a button, it's trivial to bind it to a button in one of
    // three ways:
    
    // Start the command when the button is pressed and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenPressed(new ExampleCommand());
    
    // Run the command while the button is being held down and interrupt it once
    // the button is released.
    // button.whileHeld(new ExampleCommand());
    
    // Start the command when the button is released  and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenReleased(new ExampleCommand());

    
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public Joystick operatorStickTwo;
    public JoystickButton buttonThreeGatherTote;
    public JoystickButton buttonFourRedeployGatherer;
    public JoystickButton buttonTwoDispenseAtGround;
    public Joystick operatorStickOne;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public OI() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS

        operatorStickOne = new Joystick(2);
        
        buttonTwoDispenseAtGround = new JoystickButton(operatorStickOne, 2);
        buttonTwoDispenseAtGround.whenPressed(new dispenseTotesAtGround());
        buttonFourRedeployGatherer = new JoystickButton(operatorStickOne, 4);
        buttonFourRedeployGatherer.whenPressed(new redeployGatherer());
        buttonThreeGatherTote = new JoystickButton(operatorStickOne, 3);
        buttonThreeGatherTote.whenPressed(new gatherTote());
        operatorStickTwo = new Joystick(3);
        

	    
        // SmartDashboard Buttons
        SmartDashboard.putData("Autonomous Command", new AutonomousCommand());

        SmartDashboard.putData("rollyGrabberControl", new rollyGrabberControl());

        SmartDashboard.putData("dropTrashCanAtZero", new dropTrashCanAtZero());

        SmartDashboard.putData("dropTrashCanAtOne", new dropTrashCanAtOne());

        SmartDashboard.putData("dropTrashCanAtTwo", new dropTrashCanAtTwo());

        SmartDashboard.putData("dropTrashCanAtThree", new dropTrashCanAtThree());

        SmartDashboard.putData("dropTrashCanAtFour", new dropTrashCanAtFour());

        SmartDashboard.putData("dropTrashCanAtFive", new dropTrashCanAtFive());

        SmartDashboard.putData("dropTrashCanAtSix", new dropTrashCanAtSix());

        SmartDashboard.putData("winchAtZeroTotes", new winchAtZeroTotes());

        SmartDashboard.putData("elevatorGoToGroundLevel", new elevatorGoToGroundLevel());

        SmartDashboard.putData("redeployGatherer", new redeployGatherer());

        SmartDashboard.putData("winchAtOneTote", new winchAtOneTote());

        SmartDashboard.putData("bringInToteOnCaterpillar", new bringInToteOnCaterpillar());

        SmartDashboard.putData("recycleBinClawOpen", new recycleBinClawOpen());

        SmartDashboard.putData("bringOutToteOnCaterpillar", new bringOutToteOnCaterpillar());

        SmartDashboard.putData("dispenseTotesAtGround", new dispenseTotesAtGround());

        SmartDashboard.putData("gatherTote", new gatherTote());

        SmartDashboard.putData("caterpillarStop", new caterpillarStop());

        SmartDashboard.putData("resetToteCycle", new resetToteCycle());

        SmartDashboard.putData("reverseCaterpillar", new reverseCaterpillar());

        SmartDashboard.putData("winchAtTwoTotes", new winchAtTwoTotes());

        SmartDashboard.putData("automatedElevator", new automatedElevator());

        SmartDashboard.putData("alignTote", new alignTote());

        SmartDashboard.putData("elevatorStop", new elevatorStop());

        SmartDashboard.putData("pickUpRecycleBin", new pickUpRecycleBin());

        SmartDashboard.putData("recycleBinClawBottom", new recycleBinClawBottom());

        SmartDashboard.putData("gathererDown", new gathererDown());

        SmartDashboard.putData("gathererDeploy", new gathererDeploy());

        SmartDashboard.putData("gathererUp", new gathererUp());

        SmartDashboard.putData("elevatorGoToStepLevel", new elevatorGoToStepLevel());

        SmartDashboard.putData("gathererRectract", new gathererRectract());

        SmartDashboard.putData("winchAtThreeTotes", new winchAtThreeTotes());

        SmartDashboard.putData("winchAtFourTotes", new winchAtFourTotes());

        SmartDashboard.putData("winchAtFiveTotes", new winchAtFiveTotes());

        SmartDashboard.putData("winchAtSixTotes", new winchAtSixTotes());


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }
    
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
    public Joystick getoperatorStickTwo() {
        return operatorStickTwo;
    }

    public Joystick getoperatorStickOne() {
        return operatorStickOne;
    }


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
}

