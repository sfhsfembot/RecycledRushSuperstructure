// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc692.RecycleRushSuperStructure;
    

import edu.wpi.first.wpilibj.Compressor;
import edu.wpi.first.wpilibj.DigitalInput;
import edu.wpi.first.wpilibj.DoubleSolenoid;
import edu.wpi.first.wpilibj.SpeedController;
import edu.wpi.first.wpilibj.Talon;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;

import java.util.Vector;

/**
 * The RobotMap is a mapping from the ports sensors and actuators are wired into
 * to a variable name. This provides flexibility changing wiring, makes checking
 * the wiring easier and significantly reduces the number of magic numbers
 * floating around.
 */
public class RobotMap {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static SpeedController caterpillarcaterpillarBelt;
    public static SpeedController toteAlignmentrotatingAlignmentMotor;
    public static DigitalInput toteAlignmentrightTopAlignmentSensor;
    public static DigitalInput toteAlignmentrightMiddleAlignmentSensor;
    public static DigitalInput toteAlignmentleftMiddleAlignmentSensor;
    public static DigitalInput toteAlignmentleftBottomAlignmentSensor;
    public static DigitalInput toteAlignmentsuctionCupAlignmentSensor;
    public static DigitalInput toteAlignmentleftTopAlignmentSensor;
    public static DigitalInput toteAlignmentrightBottomAlignmentSensor;
    public static DoubleSolenoid gatherergathererInOutPiston;
    public static DoubleSolenoid gatherergathererUpDownPiston;
    public static DigitalInput gatherergathererDeployedLimit;
    public static DigitalInput gatherergathererToteDetectionLimit;
    public static DigitalInput gatherergathererRetractedLimit;
    public static DigitalInput elevatorelevatorLevelTopLoadLimit;
    public static DigitalInput elevatorelevatorLevelStepLimit;
    public static SpeedController elevatorelevatorPlatformUpDownMotor;
    public static DoubleSolenoid elevatorflapperRelease;
    public static DoubleSolenoid elevatorbackStopRelease;
    public static DigitalInput elevatorelevatorLevelGroundLimit;
    public static Compressor pneumaticscompressorOne;
    public static DigitalInput recycleBinClawrecycleBinBottomLimit;
    public static DigitalInput recycleBinClawrecycleBinDispenseLimit;
    public static SpeedController recycleBinClawrecycleBinWinchMotor;
    public static DigitalInput recycleBinClawrecycleBinTopLimit;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public static void init() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        caterpillarcaterpillarBelt = new Talon(6);
        LiveWindow.addActuator("Caterpillar", "caterpillarBelt", (Talon) caterpillarcaterpillarBelt);
        
        toteAlignmentrotatingAlignmentMotor = new Talon(4);
        LiveWindow.addActuator("ToteAlignment", "rotatingAlignmentMotor", (Talon) toteAlignmentrotatingAlignmentMotor);
        
        toteAlignmentrightTopAlignmentSensor = new DigitalInput(12);
        LiveWindow.addSensor("ToteAlignment", "rightTopAlignmentSensor", toteAlignmentrightTopAlignmentSensor);
        
        toteAlignmentrightMiddleAlignmentSensor = new DigitalInput(13);
        LiveWindow.addSensor("ToteAlignment", "rightMiddleAlignmentSensor", toteAlignmentrightMiddleAlignmentSensor);
        
        toteAlignmentleftMiddleAlignmentSensor = new DigitalInput(10);
        LiveWindow.addSensor("ToteAlignment", "leftMiddleAlignmentSensor", toteAlignmentleftMiddleAlignmentSensor);
        
        toteAlignmentleftBottomAlignmentSensor = new DigitalInput(11);
        LiveWindow.addSensor("ToteAlignment", "leftBottomAlignmentSensor", toteAlignmentleftBottomAlignmentSensor);
        
        toteAlignmentsuctionCupAlignmentSensor = new DigitalInput(15);
        LiveWindow.addSensor("ToteAlignment", "suctionCupAlignmentSensor", toteAlignmentsuctionCupAlignmentSensor);
        
        toteAlignmentleftTopAlignmentSensor = new DigitalInput(9);
        LiveWindow.addSensor("ToteAlignment", "leftTopAlignmentSensor", toteAlignmentleftTopAlignmentSensor);
        
        toteAlignmentrightBottomAlignmentSensor = new DigitalInput(14);
        LiveWindow.addSensor("ToteAlignment", "rightBottomAlignmentSensor", toteAlignmentrightBottomAlignmentSensor);
        
        gatherergathererInOutPiston = new DoubleSolenoid(0, 0, 1);      
        LiveWindow.addActuator("Gatherer", "gathererInOutPiston", gatherergathererInOutPiston);
        
        gatherergathererUpDownPiston = new DoubleSolenoid(0, 2, 3);      
        LiveWindow.addActuator("Gatherer", "gathererUpDownPiston", gatherergathererUpDownPiston);
        
        gatherergathererDeployedLimit = new DigitalInput(6);
        LiveWindow.addSensor("Gatherer", "gathererDeployedLimit", gatherergathererDeployedLimit);
        
        gatherergathererToteDetectionLimit = new DigitalInput(8);
        LiveWindow.addSensor("Gatherer", "gathererToteDetectionLimit", gatherergathererToteDetectionLimit);
        
        gatherergathererRetractedLimit = new DigitalInput(7);
        LiveWindow.addSensor("Gatherer", "gathererRetractedLimit", gatherergathererRetractedLimit);
        
        elevatorelevatorLevelTopLoadLimit = new DigitalInput(2);
        LiveWindow.addSensor("Elevator", "elevatorLevelTopLoadLimit", elevatorelevatorLevelTopLoadLimit);
        
        elevatorelevatorLevelStepLimit = new DigitalInput(1);
        LiveWindow.addSensor("Elevator", "elevatorLevelStepLimit", elevatorelevatorLevelStepLimit);
        
        elevatorelevatorPlatformUpDownMotor = new Talon(5);
        LiveWindow.addActuator("Elevator", "elevatorPlatformUpDownMotor", (Talon) elevatorelevatorPlatformUpDownMotor);
        
        elevatorflapperRelease = new DoubleSolenoid(0, 4, 5);      
        LiveWindow.addActuator("Elevator", "flapperRelease", elevatorflapperRelease);
        
        elevatorbackStopRelease = new DoubleSolenoid(0, 6, 7);      
        LiveWindow.addActuator("Elevator", "backStopRelease", elevatorbackStopRelease);
        
        elevatorelevatorLevelGroundLimit = new DigitalInput(0);
        LiveWindow.addSensor("Elevator", "elevatorLevelGroundLimit", elevatorelevatorLevelGroundLimit);
        
        pneumaticscompressorOne = new Compressor(0);
        
        
        recycleBinClawrecycleBinBottomLimit = new DigitalInput(4);
        LiveWindow.addSensor("RecycleBinClaw", "recycleBinBottomLimit", recycleBinClawrecycleBinBottomLimit);
        
        recycleBinClawrecycleBinDispenseLimit = new DigitalInput(5);
        LiveWindow.addSensor("RecycleBinClaw", "recycleBinDispenseLimit", recycleBinClawrecycleBinDispenseLimit);
        
        recycleBinClawrecycleBinWinchMotor = new Talon(7);
        LiveWindow.addActuator("RecycleBinClaw", "recycleBinWinchMotor", (Talon) recycleBinClawrecycleBinWinchMotor);
        
        recycleBinClawrecycleBinTopLimit = new DigitalInput(3);
        LiveWindow.addSensor("RecycleBinClaw", "recycleBinTopLimit", recycleBinClawrecycleBinTopLimit);
        

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }
}
